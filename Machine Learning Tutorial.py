# -*- coding: utf-8 -*-
"""computing society tutorial notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sbA8W8Mi8oUsk-dbO0tB-5DQm11PEADP
"""

import keras
from keras.datasets import mnist
from keras.datasets import cifar10
import numpy as np
import matplotlib.pyplot as plt

def display(images, number, rows):
  n = number
  plt.figure(figsize=(20, 4))
  for i in range(n):
      ax = plt.subplot(2, n/rows, i + 1)
      plt.imshow(images[i].reshape(28, 28))
      plt.gray()
      ax.get_xaxis().set_visible(False)
      ax.get_yaxis().set_visible(False)

## loading MNIST
(x_train, y_train), (x_test, y_test) = mnist.load_data()

## resizing images
x_train = x_train.astype('float32') / 255.
x_test = x_test.astype('float32') / 255.
x_train = x_train.reshape((len(x_train), np.prod(x_train.shape[1:])))
x_test = x_test.reshape((len(x_test), np.prod(x_test.shape[1:])))

## OHE
y_train = keras.utils.to_categorical(y_train, num_classes=10)
y_test = keras.utils.to_categorical(y_test, num_classes=10)

display(x_train, 10, 1)
print([np.argmax(i) for i in y_train[:10]])

shape_in = x_train[0].shape
shape_out = y_train[0].shape[0]

print(shape_in)
print(shape_out)

from keras.layers import Input, Dense
from keras.models import Model

input_image = Input(shape=(shape_in))
layer_1 = Dense(1024, activation='relu')(input_image)
layer_2 = Dense(1024, activation='relu')(layer_1)
output = Dense(shape_out, activation='sigmoid')(layer_2)

classifier = Model(input_image, output)

classifier.compile(loss='mean_squared_error', optimizer='sgd')

classifier.fit(x_train, y_train,
                epochs=10,
                batch_size=256,
                shuffle=True,
                validation_data=(x_test, y_test))

display(x_train, 20, 2)
print([np.argmax(i) for i in y_train[:20]])

preds = classifier.predict(x_train)
preds = [np.argmax(i) for i in preds][:20]
print(preds)

